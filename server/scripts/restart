#!/bin/bash

# Exit on any error
set -e

echo "🔄 Restarting Node.js server..."

# Check if ngrok is running
if ! curl -s http://localhost:4040/api/tunnels 2>/dev/null | grep -q "public_url"; then
    echo "❌ Ngrok is not running!"
    echo "Run ./tunnel first to set up the tunnel"
    exit 1
fi

# Get current ngrok URL
NGROK_URL=$(curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"https://[^"]*' | head -1 | sed 's/"public_url":"//' 2>/dev/null || echo "")
echo "🔗 Using ngrok tunnel: $NGROK_URL"

# Set PUBLIC_URL if not already set
if [ -z "$PUBLIC_URL" ]; then
    export PUBLIC_URL="$NGROK_URL"
    echo "📌 PUBLIC_URL set to: $PUBLIC_URL"
else
    echo "📌 PUBLIC_URL already set to: $PUBLIC_URL"
fi

# Set NODE_ENV to dev
export NODE_ENV="dev"
echo "🔧 NODE_ENV set to: $NODE_ENV"

# Kill any existing server process
echo "🛑 Stopping existing server..."
pkill -f "node build/main.js" 2>/dev/null || echo "✅ No existing server found"

# Clean previous build
echo "🧹 Cleaning previous build..."
npm run clean >/dev/null

# Build the server
echo "📦 Building server..."
npm run build >/dev/null

# Start the server in background
echo "🚀 Starting server on port 3333..."
npm start &
SERVER_PID=$!

# Wait a moment for server to start
sleep 2

# Check if BOT_TOKEN is set for webhook registration
if [ -z "$BOT_TOKEN" ]; then
    echo "⚠️  BOT_TOKEN not set - skipping webhook registration"
    echo "   Set BOT_TOKEN and restart to enable webhook"
else
    # Register webhook with Telegram
    echo ""
    echo "📡 Registering webhook with Telegram..."
    WEBHOOK_URL="$NGROK_URL/webhook"
    
    RESPONSE=$(curl -s -X POST "https://api.telegram.org/bot$BOT_TOKEN/setWebhook" \
        -H "Content-Type: application/json" \
        -d "{\"url\": \"$WEBHOOK_URL\"}")
    
    if echo "$RESPONSE" | grep -q '"ok":true'; then
        echo "✅ Webhook registered successfully!"
    else
        echo "❌ Failed to register webhook: $RESPONSE"
        kill $SERVER_PID 2>/dev/null || true
        exit 1
    fi
fi

echo "✅ Setup complete!"
echo "🆔 Server PID: $SERVER_PID"
echo "📊 Dashboard: http://localhost:4040"
echo ""

# Keep script running and handle cleanup on exit
cleanup() {
    echo ""
    echo "🧹 Stopping server..."
    kill $SERVER_PID 2>/dev/null || true
    echo "✅ Server stopped"
}

trap cleanup EXIT INT TERM

# Wait for user to stop
echo ""
echo "Press Ctrl+C to stop the server (ngrok will keep running)"
wait